# ফাইলের নাম: .github/workflows/main.yml

name: Build Android APK with Python-for-Android(samiul10)

on:
  # "main" ব্রাঞ্চে কোড পুশ করলে স্বয়ংক্রিয়ভাবে রান হবে
  push:
    branches: [ "main" ]
  # GitHub Actions ট্যাব থেকে ম্যানুয়ালি রান করার সুযোগ
  workflow_dispatch:

jobs:
  build-android:
    name: Build Signed Release APK with P4A
    runs-on: ubuntu-22.04

    steps:
      # ধাপ ১: আপনার রিপোজিটরির কোড ডাউনলোড করা
      - name: Checkout repository
        uses: actions/checkout@v4

      # ধাপ ২: Java JDK 11 ইনস্টল করা
      # python-for-android-এর পুরনো রেসিপিগুলোর সাথে এটি স্থিতিশীল
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      # ধাপ ৩: সরাসরি Android NDK 25b ডাউনলোড এবং সেটআপ করা
      # 'ALooper_pollAll' এরর এড়ানোর জন্য এটি সবচেয়ে নির্ভরযোগ্য পদ্ধতি
      - name: Download and set up NDK 25b
        run: |
          echo "Downloading NDK r25b..."
          wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          echo "Unzipping NDK..."
          unzip -q android-ndk-r25b-linux.zip
          # এনভায়রনমেন্ট ভেরিয়েবল সেট করা, যাতে p4a এটি খুঁজে পায়
          echo "ANDROID_NDK_HOME=$(pwd )/android-ndk-r25b" >> $GITHUB_ENV
          echo "NDK path set to: $(pwd)/android-ndk-r25b"

      # ধাপ ৪: Python এবং প্রয়োজনীয় লাইব্রেরি ইনস্টল করা
      - name: Set up Python and install dependencies
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - run: |
          pip install --upgrade pip
          # Cython 3+ এর সাথে p4a-এর সামঞ্জস্যতার সমস্যা এড়াতে ভার্সন নির্দিষ্ট করা
          pip install "cython<3.0"
          # p4a এবং kivy ইনস্টল করা
          pip install python-for-android kivy==2.1.0

      # ধাপ ৫: রিলিজ বিল্ডের জন্য Keystore তৈরি করা
      - name: Create Keystore
        env:
          KEY_PASSWORD: ${{ secrets.RELEASE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.RELEASE_ALIAS }}
        run: |
          keytool -genkey -v -keystore release.keystore -alias $KEY_ALIAS -keyalg RSA -keysize 2048 -validity 10000 -storepass $KEY_PASSWORD -keypass $KEY_PASSWORD -dname "CN=Md Samiul Islam, OU=Development, O=SamiulDev, L=Dhaka, ST=Dhaka, C=BD" -noprompt

      # ধাপ ৬: P4A ব্যবহার করে সাইন করা APK বিল্ড করা (সঠিক আর্গুমেন্ট সহ)
      - name: Build Signed APK with P4A
        env:
          KEY_PASSWORD: ${{ secrets.RELEASE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.RELEASE_ALIAS }}
        run: |
          p4a apk \
            --requirements=python3,kivy==2.1.0,android,jnius,sqlite3,openssl,requests,pillow,pyjnius \
            --package=com.samiul.minifire \
            --name="MINI FIRE" \
            --version=1.0.0 \
            --bootstrap=sdl2 \
            --dist_name=minifire \
            --arch=arm64-v8a \
            --orientation=portrait \
            --window \
            --release \
            --private=. \
            --sign \
            --keystore release.keystore \
            --keystore_pass "$KEY_PASSWORD" \
            --alias "$KEY_ALIAS" \
            --alias_pass "$KEY_PASSWORD"

      # ধাপ ৭: বিল্ড হওয়া APK ফাইলটিকে আর্টিফ্যাক্ট হিসেবে আপলোড করা
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-release-apk
          path: ./*.apk
          
