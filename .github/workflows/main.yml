      # ... (উপরের debug build steps একই থাকবে)

      - name: Optional: Build and Sign Release (if keystore secrets present)
        if: secrets.KEYSTORE_BASE64 != ''
        env:
          STORAGE_DIR: ${{ env.STORAGE_DIR }}
        run: |
          set -euo pipefail

          echo "Decoding keystore from KEYSTORE_BASE64 secret..."
          mkdir -p "${{ github.workspace }}/keystore"
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > "${{ github.workspace }}/keystore/release_key.jks"
          chmod 600 "${{ github.workspace }}/keystore/release_key.jks"

          # export p4a env vars so python-for-android / buildozer can use them
          export P4A_RELEASE_KEYSTORE="${{ github.workspace }}/keystore/release_key.jks"
          export P4A_RELEASE_KEYSTORE_PASSWD="${{ secrets.KEYSTORE_PASSWORD }}"
          export P4A_RELEASE_KEYALIAS="${{ secrets.KEY_ALIAS }}"
          export P4A_RELEASE_KEYALIAS_PASSWD="${{ secrets.KEY_PASSWORD }}"

          echo "Building release APK (this may take several minutes)..."
          # build release (signed step will be attempted using the above env vars)
          buildozer --verbose --storage-dir "${{ env.STORAGE_DIR }}" android release

          echo "Searching for produced AAB/APK files..."
          # Collect probable output files
          find "${{ github.workspace }}" -type f \( -name "*-release-unsigned.apk" -o -name "*.apk" -o -name "*.aab" \) -print

          # If unsigned APK exists we will jarsign + zipalign as a defensive step
          APK_UNSIGNED=$(find "${{ github.workspace }}" -type f -name "*-release-unsigned.apk" | head -n1 || true)
          if [ -n "$APK_UNSIGNED" ]; then
            echo "Found unsigned APK: $APK_UNSIGNED"
            ZIPALIGN="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/build-tools/36.1.0/zipalign"
            JARSIGNER="$(command -v jarsigner || true)"
            if [ -z "$JARSIGNER" ]; then
              echo "jarsigner not found in PATH; ensure JDK is setup" >&2
              exit 1
            fi
            echo "Signing APK with jarsigner..."
            jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
              -keystore "${{ github.workspace }}/keystore/release_key.jks" \
              -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
              -keypass "${{ secrets.KEY_PASSWORD }}" \
              "$APK_UNSIGNED" "${{ secrets.KEY_ALIAS }}"

            if [ -x "$ZIPALIGN" ]; then
              ALIGNED="${APK_UNSIGNED%.apk}-aligned.apk"
              echo "Zipaligning to $ALIGNED"
              "$ZIPALIGN" -v -p 4 "$APK_UNSIGNED" "$ALIGNED"
              echo "Aligned APK: $ALIGNED"
            else
              echo "zipalign not found at expected build-tools path; skipping zipalign (may still be OK)" >&2
            fi
          else
            echo "No *-release-unsigned.apk found — finding any .aab/.apk produced"
            find "${{ github.workspace }}" -type f \( -name "*.aab" -o -name "*.apk" \) -print
          fi
        shell: bash

      - name: Upload release artifacts (if any)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ${{ github.workspace }}/bin/*.apk
            ${{ github.workspace }}/bin/*.aab
            ${{ github.workspace }}/.buildozer/android/platform/*/bin/*.apk
            ${{ github.workspace }}/keystore/release_key.jks
          retention-days: 7
